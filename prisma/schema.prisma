// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int            @id @default(autoincrement())
  userPseudo    String
  userEmail     String         @unique
  userPassword  String
  userEncrypted Json
  userCreatedAt DateTime       @default(now())
  userUpdatedAt DateTime       @updatedAt
  vault         Vault[]
  refresh       RefreshToken[]
  posseder      Posseder[]
}

model Vault {
  vaultId        Int        @id @default(autoincrement())
  vaultName      String
  vaultCreatedAt DateTime   @default(now())
  vaultUpdatedAt DateTime   @updatedAt
  vaultEncrypted Json
  userId         Int
  user           User       @relation(fields: [userId], references: [userId])
  card           Card[]
  posseder       Posseder[]
}

model Card {
  cardId        Int      @id @default(autoincrement())
  cardTitle     String
  cardLogin     String
  cardPassword  String
  cardUrl       String
  cardEncrypted Json
  cardCreatedAt DateTime @default(now())
  cardUpdatedAt DateTime @updatedAt
  vault         Vault    @relation(fields: [vaultId], references: [vaultId])
  vaultId       Int
}

model RefreshToken {
  refreshId        Int       @id @default(autoincrement())
  refreshToken     String    @unique
  userId           Int
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  refreshIssuedAt  DateTime  @default(now())
  refreshExpiresAt DateTime
  refreshRevokedAt DateTime?

  @@index([userId])
}

model Posseder {
  vaultId Int
  userId  Int
  vault   Vault @relation(fields: [vaultId], references: [vaultId])
  user    User  @relation(fields: [userId], references: [userId])

  @@id([vaultId, userId])
}
